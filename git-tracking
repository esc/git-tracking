#!/bin/bash
# Maintain local tracking braches

# Author:  Valentin Haenel <valentin.haenel@gmx.de>
# Licence: wtfpl <http://sam.zoy.org/wtfpl/>

# use shUnit

if [ $# -eq 0 ]; then
    set -- -h
fi

OPTS_SPEC="\
git tracking start [--force|-f] <remote>/<branch>
git tracking stop
git tracking fast-forward
git tracking status
git tracking review
--
h,help        show the help
 options for 'start'
f,force       implies 'tracking stop' first
"

eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

#. $(git --exec-path)/git-sh-setup

while [ $# -gt 0 ]; do
    opt="$1"
    shift
    case "$opt" in
        -f) force=1 ;;
        --) break ;;
    esac
done

command="$1"
shift

croak() {
    echo -e "error: $@"
    exit 1
}

finish() {
    echo -e "Done: $@"
    exit 1
}

branch=$( git branch | grep ^* | sed 's/^\* //' )
if [[ $branch == '(no branch)' ]] ; then
    croak 'You have a detached HEAD, this can not track anything.'
fi
remote=$( git config branch.$branch.remote )
remote_branch=$( git config branch.$branch.merge | sed 's,^refs/heads/,,')

check_no_tracking (){
if [[ -z $remote ]] ; then
    croak "Your branch '$branch' isn't tracking anything."
fi
}

do_stop_tracking() {
    check_no_tracking
    git config --remove-section branch.$branch
    echo "Branch '$branch' is no longer tracking '$remote/$remote_branch'."
}

fast_forward_tracking() {
    check_no_tracking
    if [[ -n $remote && -n $( git config branch.$branch.merge) ]] ; then
        remote_ahead_local=$( git log --oneline $branch..$remote/$branch)
        local_ahead_remote=$( git log --oneline $remote/$branch..$branch)
        if [[ -z $remote_ahead_local && -z $local_ahead_remote ]] ; then
                if [[ $( git rev-parse $branch )  == $( git rev-parse $remote/$branch ) ]] ; then
                    croak "Your branch '$branch' points to same commit as '$remote/$branch', doing nothing."
                else
                    echo "Dude..."
                    exit 42
                fi
        fi
        if [[ -z $remote_ahead_local && -n $local_ahead_remote ]] ; then
            croak "Your branch '$branch'is ahead of '$remote/$branch', perhaps you want to push?"
        fi
        if [[ -n $local_ahead_remote && -n $remote_ahead_local ]] ; then
            croak "Your branches '$branch' and '$remote/$branch' and have diverged, fast-forward not possible!"
        fi
        if [[ -n $remote_ahead_local && -z $local_ahead_remote ]] ; then
            echo "Fast-forward '$branch' to '$remote/$branch'."
            git merge --ff-only $remote/$branch
            exit 0
        fi
    fi
}

start_tracking(){
    if [[ -n $remote && -z $force ]] ; then
        croak "Your branch '$branch' is already tracking '$remote/$branch'\n"\
              "Either use 'git tracking stop' first or use --force(-f)."
    elif [[ -n $remote && $force ]] ; then
        do_stop_tracking
    fi
    if [[ $1 != */* ]]; then
        croak "Remote tracking branch was not specified as <remote>/<branch>.\n"\
              "Available remote branches are:\n"\
              $( git branch -r )
    fi
    remote_branch=$( echo $1 | sed 's_^[^/]*/__')
    new_remote=$( echo $1 | sed 's,/.*$,,')
    if [[ -z $( git remote | grep  -x $new_remote) ]]  ;then
        croak "Can not start tracking, remote '$new_remote' does not exist!"
    fi
    if [[ -z $( git branch -r | grep -x "  $new_remote/$remote_branch" ) ]] ; then
        croak "Can not start tracking, remote '$new_remote' does not appear to have a branch '$remote_branch'."
    fi
    git config branch.$branch.remote $new_remote
    git config branch.$branch.merge 'refs/heads/'$remote_branch
    echo "Branch '$branch' setup to track remote branch '$remote_branch' from '$new_remote'."
    exit 0
}

stop_tracking() {
    do_stop_tracking
    exit 0
}

review_tracking() {
    check_no_tracking
    # TODO check that the remote tracking branch is actually ahead
    git log $@ $branch..$remote/$branch
}

status_tracking(){
    #rewrite this and format output neater
    git branch -vv
    exit 0
}

case "$command" in
    stop|fast-forward|status|review)
        [[ $force -gt 0 ]] && croak "[-f|--force] can only be used with 'start'";;
    start) ;;
    *) croak "Unknown command '$command'" ;;
esac

$command"_tracking" "$@"
